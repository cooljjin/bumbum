'use client';

import React from 'react';
import { useEditorStore, useGridSettings, useSnapStrength, useAutoLock } from '../../store/editorStore';

interface EditToolbarProps {
  onToggleFurnitureCatalog?: () => void;
  showFurnitureCatalog?: boolean;
  onToggleTemplateSelector?: () => void;
  showTemplateSelector?: boolean;
  isMobile?: boolean;
}

export default function EditToolbar({
  onToggleFurnitureCatalog,
  showFurnitureCatalog,
  onToggleTemplateSelector,
  showTemplateSelector,
  isMobile = false
}: EditToolbarProps) {
  const {
    toggleGridSnap,
    setSnapStrength,
    toggleSnapStrength,
    toggleAutoLock,
    setAutoLockDelay,
    undo,
    redo
  } = useEditorStore();

  const gridSettings = useGridSettings();
  const snapStrength = useSnapStrength();
  const autoLock = useAutoLock();

  return (
    <div className={`absolute top-6 left-1/2 transform -translate-x-1/2 bg-white rounded-2xl shadow-2xl border-2 border-gray-200 ${
      isMobile ? 'p-8 max-w-[95vw]' : 'p-6'
    }`} style={{ zIndex: 100 }}>
      <div className={`flex items-center ${isMobile ? 'gap-8 flex-wrap justify-center' : 'gap-6'}`}>
        {/* 그리드 설정 - 더 명확한 토글 */}
        <div className={`flex items-center ${isMobile ? 'gap-4' : 'gap-3'}`}>
          <button
            onClick={toggleGridSnap}
            className={`px-4 py-2.5 rounded-xl font-medium transition-all duration-300 border-2 ${
              gridSettings.enabled
                ? 'bg-indigo-600 text-white border-indigo-700 shadow-lg'
                : 'bg-gray-100 text-gray-600 border-gray-300 hover:bg-gray-200'
            }`}
            title="그리드 스냅"
          >
            <div className="flex items-center gap-2">
              <span className="text-lg">🔲</span>
              <span className="text-sm font-medium">그리드 {gridSettings.enabled ? 'ON' : 'OFF'}</span>
            </div>
          </button>

          {/* 스냅 강도 설정 */}
          <div className={`flex flex-col ${isMobile ? 'gap-2' : 'gap-1'}`}>
            <div className="flex items-center gap-2">
              <button
                onClick={toggleSnapStrength}
                className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-all duration-300 border ${
                  snapStrength.enabled
                    ? 'bg-yellow-500 text-white border-yellow-600'
                    : 'bg-gray-100 text-gray-600 border-gray-300'
                }`}
                title="스냅 강도 조절"
              >
                <span className="text-xs">🎯</span>
              </button>
              <span className="text-xs text-gray-600 font-medium">강도</span>
            </div>

            {snapStrength.enabled && (
              <div className={`flex ${isMobile ? 'gap-3' : 'gap-2'}`}>
                {/* 그리드 스냅 강도 */}
                <div className="flex flex-col items-center">
                  <span className="text-xs text-gray-500 mb-1">이동</span>
                  <input
                    type="range"
                    min="0"
                    max="2"
                    step="0.1"
                    value={snapStrength.translation}
                    onChange={(e) => setSnapStrength({ translation: parseFloat(e.target.value) })}
                    className="w-16 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                    title={`이동 스냅 강도: ${snapStrength.translation.toFixed(1)}`}
                  />
                  <span className="text-xs text-gray-600 mt-1">{snapStrength.translation.toFixed(1)}</span>
                </div>

                {/* 회전 스냅 강도 */}
                <div className="flex flex-col items-center">
                  <span className="text-xs text-gray-500 mb-1">회전</span>
                  <input
                    type="range"
                    min="0"
                    max="2"
                    step="0.1"
                    value={snapStrength.rotation}
                    onChange={(e) => setSnapStrength({ rotation: parseFloat(e.target.value) })}
                    className="w-16 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                    title={`회전 스냅 강도: ${snapStrength.rotation.toFixed(1)}`}
                  />
                  <span className="text-xs text-gray-600 mt-1">{snapStrength.rotation.toFixed(1)}</span>
                </div>
              </div>
            )}

            {/* 자동 고정 설정 */}
            <div className="flex flex-col items-center gap-2">
              <div className="flex items-center gap-2">
                <button
                  onClick={toggleAutoLock}
                  className={`px-3 py-2 rounded-lg font-medium transition-all duration-300 border-2 ${
                    autoLock.enabled
                      ? 'bg-green-600 text-white border-green-700 shadow-lg'
                      : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200'
                  }`}
                  title={`자동 고정 ${autoLock.enabled ? '비활성화' : '활성화'}`}
                >
                  <div className="flex items-center gap-1">
                    <span className="text-sm">🔒</span>
                    <span className="text-xs font-medium">자동고정</span>
                  </div>
                </button>

                {/* 자동 고정 지연 시간 설정 */}
                <div className="flex flex-col items-center">
                  <span className="text-xs text-gray-500 mb-1">지연시간</span>
                  <input
                    type="range"
                    min="500"
                    max="3000"
                    step="100"
                    value={autoLock.delay}
                    onChange={(e) => setAutoLockDelay(parseInt(e.target.value))}
                    className="w-12 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                    title={`자동 고정 지연 시간: ${autoLock.delay}ms`}
                  />
                  <span className="text-xs text-gray-600 mt-1">{(autoLock.delay / 1000).toFixed(1)}s</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* 구분선 */}
        <div className="w-0.5 h-12 bg-gradient-to-b from-gray-300 to-gray-400 rounded-full" />

        {/* 편집 도구 - 더 명확한 버튼 */}
        <div className={`flex ${isMobile ? 'gap-4' : 'gap-3'}`}>
          <button
            onClick={undo}
            className="px-4 py-2.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl font-medium transition-all duration-300 border-2 border-gray-300 hover:border-gray-400"
            title="실행 취소 (Ctrl+Z)"
          >
            <div className="flex items-center gap-2">
              <span className="text-lg">↶</span>
              <span className="text-sm font-medium">실행취소</span>
            </div>
          </button>

          <button
            onClick={redo}
            className="px-4 py-2.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl font-medium transition-all duration-300 border-2 border-gray-300 hover:border-gray-400"
            title="다시 실행 (Ctrl+Y)"
          >
            <div className="flex items-center gap-2">
              <span className="text-lg">↷</span>
              <span className="text-sm font-medium">다시실행</span>
            </div>
          </button>
        </div>

        {/* 구분선 */}
        <div className="w-0.5 h-12 bg-gradient-to-b from-gray-300 to-gray-400 rounded-full" />

        {/* 가구 카탈로그 토글 - 더 명확한 버튼 */}
        <button
          onClick={onToggleFurnitureCatalog}
          className={`px-5 py-2.5 rounded-xl font-medium transition-all duration-300 border-2 ${
            showFurnitureCatalog
              ? 'bg-blue-600 text-white border-blue-700 shadow-lg'
              : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200 hover:border-gray-400'
          }`}
          title="가구 카탈로그"
        >
          <div className="flex items-center gap-2">
            <span className="text-lg">🪑</span>
            <span className="text-sm font-medium">가구</span>
          </div>
        </button>

        {/* 룸 템플릿 토글 */}
        <button
          onClick={onToggleTemplateSelector}
          className={`px-5 py-2.5 rounded-xl font-medium transition-all duration-300 border-2 ${
            showTemplateSelector
              ? 'bg-purple-600 text-white border-purple-700 shadow-lg'
              : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200 hover:border-gray-400'
          }`}
          title="룸 템플릿"
        >
          <div className="flex items-center gap-2">
            <span className="text-lg">🏠</span>
            <span className="text-sm font-medium">템플릿</span>
          </div>
        </button>
      </div>
    </div>
  );
}
